=pod

=head1 NAME

 icewmhint - set IceWM hints by window class and instance

=head1 SYNOPSIS

B<icewmhint> [I<CLASS>B<.>I<INSTANCE>] I<OPTION> I<ARGUMENT>

=head1 DESCRIPTION

B<icewmhint> is a simple utility for passing IceWM hints to L<icewm(1)>
by window class and instance.  Unlike tools that use WMH or EWMH, such
as L<icesh(1)>, L<wmctl(1)> and L<xdotool(1)>, B<icewmhint> uses a
special property, C<_ICEWM_WINOPHINT>, on the root window to pass
special hints to L<icewm(1)>.

=head1 OPTIONS

B<icesh> recognizes the following options:

=head2 COMMAND OPTIONS

Command options are mutually exclusive.  Only one command option can be
specified per invocation.  If no command option is specified, argument
parsing and processing is performed.

=over

=item B<-h>, B<--help>

Print a brief usage statement to F<stdout> and exit.

=item B<-V>, B<--version>

Print the program version to F<stdout> and exit.

=item B<-C>, B<--copying>

Print copying permissions to F<stdout> for the program and exit.

=back

=head2 GENERAL OPTIONS

B<icewmhint> has not general options: all information is passed using
non-option arguments.

=head1 ARGUMENTS

The following arguments are required:

=over

=item [I<CLASS>B<.>I<INSTANCE>]

Specifies the ICCCM 2.0 B<WM_CLASS> property in terms of resource name
and resource class separated by a period (C<.>).  For example:
C<XTerm.xterm>.  This argument must be specified for all commands
affecting client windows.

=item I<OPTION> I<ARGUMENT>

Specifies the I<OPTION> to affect and the I<ARGUMENT> that goes with the
option.  Options and their arguments are as follows:

=over

=item B<icon> I<ARGUMENT>

Specifies the icon name for windows of I<CLASS>B<.>I<INSTANCE>.
I<ARGUMENT> should be the name of the icon.  L<icewm(1)> will use is
usual method to find the icon.

=item B<workspace> I<ARGUMENT>

Specifies the workspace on which a window of I<CLASS>B<.>I<INSTANCE>
will be initially placed.  I<ARGUMENT> should be a numeric workspace
number.

=item B<geometry> I<ARGUMENT>

Specifies the initial geometry for windows of the given
I<CLASS>B<.>I<INSTANCE>.  I<ARGUMENT> must be a geometry that can be
parsed by L<XParseGeometry(3)>.

=item B<layer> I<ARGUMENT>

The layer is a similar concept to the layer specified by GNOME/WMH and
implied by NetWM/EWMH.  It is in this case however specific to
L<icewm(1)>.

The command option specifies the layer to be associated with an
I<CLASS>B<.>I<INSTANCE>.  I<ARGUMENT> is either a numeric layer number
or a symbolic layer name.  Symbolic layer names are one of the
following:

=over

=item B<Desktop>

The layer of the desktop.  This is the bottom layer above the root
window.  It is the layer on which desktops normally place their icons
and background images.

=item B<Below>

The layer below other windows but immediately above the desktop.

=item B<Normal>

The normal layer for stacking client windows.

=item B<OnTop>

Above normal windows, but below the dock.

=item B<Dock>

The layer upon which panels and docks are normally placed.

=item B<AboveDock>

The layer above the dock.

=item B<Menu>

The menu layer (above everything else).  Pop up menus are not normally
placed by the window manager: these menus have permanent windows, such
as pinned menus.

=back

=item B<tray> I<ARGUMENT>

Specifies the tray handling to be applied to windows with
I<CLASS>B<.>I<INSTANCE>.  This option is specific to L<icewm(1)>.
I<ARGUMENT> can be a numerical option number or a symbolic name as
follows:

=over

=item B<Ignore>

=item B<Minimized>

=item B<Exclusive>

=back

=item I<FUNCTION> {B<0>|B<1>}

Specifies which functions are disabled/enabled (0/1) for windows with
I<CLASS>B<.>I<INSTANCE>.  The Motif-like functions are as follows:

=over

=item B<fMove>

Whether the window can be moved or not.

=item B<fResize>

Whether the window can be resized or not.

=item B<fClose>

Whether the window can be closed or not.

=item B<fMinimize>

Whether the window can be minimized or not.

=item B<fMaximize>

Whether the window can be maximized or not.

=item B<fHide>

Whether the window can be hidden or not.

=item B<fRollup>

Whether the window can be rolled up or not.

=back

=item I<DECOR> {B<0>|B<1>}

Specifies which decorations are disabled/enabled (0/1) for windows with
I<CLASS>B<.>I<INSTANCE>.  The Motif-like decorations are as follows:

=over

=item B<dTitleBar>

Whether the window has a title bar or not.

=item B<dSysMenu>

Whether the window has a window menu or not.

=item B<dBorder>

Whether the window has a border or not.

=item B<dResize>

Whether the window has a resize button (or menu item) or not.

=item B<dClose>

Whether the window has a close button (or menu item) or not.

=item B<dMinimize>

Whether the window has a minimize button (or menu item) or not.

=item B<dMaximize>

Whether the window has a maximize button (or menu item) or not.

=item B<dHide>

Whether the window has a hide button (or menu item) or not.

=item B<dRollup>

Whether the window has a shade button (or menu item) or not.

=item B<dDepth>

Whether the window has a depth button (or menu item) or not.

=back

=item I<FEATURE> {B<0>|B<1>}

Specifies which advanced features to be enabled/disabled (1/0) for
windows with I<CLASS>B<.>I<INSTANCE>.  The advanced features are as
follows:

=over

=item B<allWorkspaces>

Whether the window occupies all workspaces or not.

=item B<ignoreTaskBar>

Whether the window is to appear on the taskbar or not when it would
normally appear on the task bar.

=item B<noIgnoreTaskBar>

Whether the window is to appear on the taskbar or not when it would
normally not appear on the task bar.

=item B<ignoreWinList>

Whether to ignore the window in the window list or not.

=item B<ignoreQuickSwitch>

Whether to ignore the window in the quick switch list or not.

=item B<fullKeys>

Whether to permit all key presses and releases to be passed to the
client window or not.

=item B<noFocusOnAppRaise>

Whether to focus the window when raised or not.

=item B<ignoreNoFocusHint>

Whether to ignore ICCCM 2.0 specifications associated with the window
that specify that it is not allowed to be given focus.

=item B<ignorePositionHint>

Whether to ignore ICCCM 2.0 specifications for positioning of the window
when initially mapped.

=item B<doNotCover>

Whether or not to allow the window to be covered.

=item B<doNotFocus>

Whether to allow focus to the window or not.

=item B<startFullscreen>

Whether to start such windows in full screen mode.

=item B<startMinimized>

Whether to start such windows minimized.

=item B<startMaximized>

Whether to start such windows maximized.

=item B<startMaximizedVert>

Whether to start such windows maximized vertically.

=item B<startMaximizedHorz>

Whether to start such windows maximized horizontally.

=item B<nonICCCMconfigureRequest>

Whether such windows do not accept ICCCM 2.0 compliant configure
requests.

=item B<forcedClose>

Whether to force close (kill) a window when it will not close.

=item B<noFocusOnMap>

Whether to focus such windows when mapped or not.

=item B<ignoreUrgentHint>

Whether to ignore the ICCCM urgent hint for such windows.

=item B<appTakesFocus>

Whether to give focus to such windows or to instead have the application
take focus only when it wants.

=back

=back

=back

=head1 BUGS

B<icewmhint> had no known bugs at the time of release.  Please report bugs
for current versions to the source code repository at
L<https://github.com/bbidulock/icewm/issues>.

=head1 AUTHOR

Brian Bidulock L<mailto:bidulock@openss7.org>.

See B<--copying> for full copyright notice and copying permissions.

=head1 LICENSE

B<IceWM> is licensed under the GNU Library General Public License.
See the F<COPYING> file in the distribution or use the B<--copying> flag
to display copying permissions.

=cut

# vim: set sw=4 tw=72 nocin spell spelllang=en_ca:
